// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.9
// source: pmt/v1/permit.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Permit_Auth_FullMethodName   = "/api.pmt.v1.Permit/Auth"
	Permit_Pmt_FullMethodName    = "/api.pmt.v1.Permit/Pmt"
	Permit_PmtAll_FullMethodName = "/api.pmt.v1.Permit/PmtAll"
)

// PermitClient is the client API for Permit service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PermitClient interface {
	// 授权码获取AccessToken
	Auth(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*AuthReply, error)
	// 具体权限点验证授权
	Pmt(ctx context.Context, in *PmtRequest, opts ...grpc.CallOption) (*PmtReply, error)
	// 所有权限点的授权结果
	PmtAll(ctx context.Context, in *PmtAllRequest, opts ...grpc.CallOption) (*PmtAllReply, error)
}

type permitClient struct {
	cc grpc.ClientConnInterface
}

func NewPermitClient(cc grpc.ClientConnInterface) PermitClient {
	return &permitClient{cc}
}

func (c *permitClient) Auth(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*AuthReply, error) {
	out := new(AuthReply)
	err := c.cc.Invoke(ctx, Permit_Auth_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permitClient) Pmt(ctx context.Context, in *PmtRequest, opts ...grpc.CallOption) (*PmtReply, error) {
	out := new(PmtReply)
	err := c.cc.Invoke(ctx, Permit_Pmt_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permitClient) PmtAll(ctx context.Context, in *PmtAllRequest, opts ...grpc.CallOption) (*PmtAllReply, error) {
	out := new(PmtAllReply)
	err := c.cc.Invoke(ctx, Permit_PmtAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PermitServer is the server API for Permit service.
// All implementations must embed UnimplementedPermitServer
// for forward compatibility
type PermitServer interface {
	// 授权码获取AccessToken
	Auth(context.Context, *AuthRequest) (*AuthReply, error)
	// 具体权限点验证授权
	Pmt(context.Context, *PmtRequest) (*PmtReply, error)
	// 所有权限点的授权结果
	PmtAll(context.Context, *PmtAllRequest) (*PmtAllReply, error)
	mustEmbedUnimplementedPermitServer()
}

// UnimplementedPermitServer must be embedded to have forward compatible implementations.
type UnimplementedPermitServer struct {
}

func (UnimplementedPermitServer) Auth(context.Context, *AuthRequest) (*AuthReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Auth not implemented")
}
func (UnimplementedPermitServer) Pmt(context.Context, *PmtRequest) (*PmtReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Pmt not implemented")
}
func (UnimplementedPermitServer) PmtAll(context.Context, *PmtAllRequest) (*PmtAllReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PmtAll not implemented")
}
func (UnimplementedPermitServer) mustEmbedUnimplementedPermitServer() {}

// UnsafePermitServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PermitServer will
// result in compilation errors.
type UnsafePermitServer interface {
	mustEmbedUnimplementedPermitServer()
}

func RegisterPermitServer(s grpc.ServiceRegistrar, srv PermitServer) {
	s.RegisterService(&Permit_ServiceDesc, srv)
}

func _Permit_Auth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermitServer).Auth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Permit_Auth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermitServer).Auth(ctx, req.(*AuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Permit_Pmt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PmtRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermitServer).Pmt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Permit_Pmt_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermitServer).Pmt(ctx, req.(*PmtRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Permit_PmtAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PmtAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermitServer).PmtAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Permit_PmtAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermitServer).PmtAll(ctx, req.(*PmtAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Permit_ServiceDesc is the grpc.ServiceDesc for Permit service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Permit_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.pmt.v1.Permit",
	HandlerType: (*PermitServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Auth",
			Handler:    _Permit_Auth_Handler,
		},
		{
			MethodName: "Pmt",
			Handler:    _Permit_Pmt_Handler,
		},
		{
			MethodName: "PmtAll",
			Handler:    _Permit_PmtAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pmt/v1/permit.proto",
}
